import json
import os
from datetime import datetime


import os
import json
from datetime import datetime  # <-- import datetime
import json
import os
from datetime import datetime
import streamlit as st

def log_study_runV3(
    output_file: str,
    dataset_name: str,
    model_name: str,
    prompt_name: str,
    prompt: str,
    response: dict,
    metadata: dict = None
):
    """
    Logs a single study run (experiment) to a JSON file.

    - If the file does not exist, it creates one with a "history" list.
    - If it does exist, it appends the new record to the "history" list.
    - If the file is invalid (not valid JSON), a new file will be created.

    Parameters
    ----------
    output_file : str
        Path to the JSON file where the history will be stored.
    dataset_name : str
        Name of the dataset (e.g., 'ship-fuel-consumption-and-co2-emissions-analysis').
    model_name : str
        Name of the model used (e.g., 'OpenAI', 'Claude', 'Mistral').
    prompt_name: str
        A short identifier for the prompt variation.
    prompt : str
        The prompt text used to generate the model's response.
    response : dict
        The response (already parsed as a dictionary) generated by the model.
    metadata : dict, optional
        Additional dataset or experiment metadata you want to log.

    Returns
    -------
    None
    """
    if metadata is None:
        metadata = {}

    # Create a record of this run
    record = {
        "timestamp": datetime.now().isoformat(),
        "dataset_name": dataset_name,
        "model_name": model_name,
        "prompt_name": prompt_name,
        "prompt": prompt,
        "response": response,
        "metadata": metadata,
    }

    # Check if the file exists
    if os.path.exists(output_file):
        # Attempt to load the existing file
        try:
            with open(output_file, "r", encoding="utf-8") as f:
                file_content = f.read().strip()
                if file_content:
                    data = json.loads(file_content)
                else:
                    # File is empty, initialize
                    data = {"history": []}
        except json.JSONDecodeError:
            st.warning(f"Existing file '{output_file}' is not valid JSON. Creating a new file.")
            data = {"history": []}
    else:
        # File does not exist, start fresh
        data = {"history": []}

    # Append the new record and save
    data["history"].append(record)
    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)

    st.success(f"Study run logged to {output_file}")


def log_study_runV2(
    output_file: str,
    dataset_name: str,
    model_name: str,
    prompt_name: str,
    prompt: str,
    response: dict,
    metadata: dict = None
):
    """
    Logs a single study run (experiment) to a JSON file.

    - If the file does not exist, it creates one with a "history" list.
    - If it does exist, it appends the new record to the "history" list.

    Parameters
    ----------
    output_file : str
        Path to the JSON file where the history will be stored.
    dataset_name : str
        Name of the dataset (e.g., 'ship-fuel-consumption-and-co2-emissions-analysis').
    model_name : str
        Name of the model used (e.g., 'OpenAI', 'Claude', 'Mistral').
    prompt_name: str
        A short identifier for the prompt variation.
    prompt : str
        The prompt text used to generate the model's response.
    response : str
        The response text generated by the model.
    metadata : dict, optional
        Additional dataset or experiment metadata you want to log.
        Example: {"description": "dataset desc", "columns": ["col1", "col2"]}

    Returns
    -------
    None
    """
    if metadata is None:
        metadata = {}

    record = {
        "timestamp": datetime.now().isoformat(),
        "dataset_name": dataset_name,
        "model_name": model_name,
        "prompt_name": prompt_name,
        "prompt": prompt,
        "response": response,
        "metadata": metadata,
    }

    # Load existing history (if file exists)
    if os.path.exists(output_file):
        with open(output_file, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = {"history": []}

    # Append the new record
    data["history"].append(record)

    # Write back to the JSON file
    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)

    print(f"Study run logged to {output_file}")



def log_study_run(
    output_file: str,
    dataset_name: str,
    model_name: str,
    prompt_name:str,
    prompt: str,
    response: str,
    metadata: dict = None
):
    """
    Logs a single study run (experiment) to a JSON file.

    If the file does not exist, it creates one with a "history" list.
    If it does exist, it appends the new record to the "history" list.

    Parameters
    ----------
    output_file : str
        Path to the JSON file where the history will be stored.
    dataset_name : str
        Name of the dataset (e.g., 'ship-fuel-consumption-and-co2-emissions-analysis').
    model_name : str
        Name of the model used (e.g., 'OpenAI', 'Claude', 'Mistral').
    prompt : str
        The prompt text used to generate the model's response.
    response : str
        The response text generated by the model.
    metadata : dict, optional
        Additional dataset or experiment metadata you want to log.
        e.g., {"description": "dataset desc", "columns": ["col1", "col2"]}

    Returns
    -------
    None
    """
    # Prepare the record
    record = {
        "timestamp": datetime.now().isoformat(),
        "dataset_name": dataset_name,
        "model_name": model_name,
        "prompt_name":prompt_name,
        "prompt": prompt,
        "response": response,
        "metadata": metadata if metadata else {}
    }

    # Load existing history (if file exists), otherwise create fresh structure
    if os.path.exists(output_file):
        with open(output_file, "r") as f:
            data = json.load(f)
    else:
        data = {"history": []}

    # Append the new record
    data["history"].append(record)

    # Write back to the JSON file
    with open(output_file, "w") as f:
        json.dump(data, f, indent=2)

    print(f"Study run logged to {output_file}")